def vJavaLang = '1.8'
def ideaLanguageLevel = 'JDK_1_8'
def javaProjects = [project(':wikiboot-web'), project(':wikiboot-core')]
def bootProjects = javaProjects - project(':wikiboot-core')
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '2.0'

buildscript {

    ext {
        springRepo = 'http://repo.spring.io/libs-release'
        springRepoSnaps = 'http://repo.spring.io/libs-snapshot'
        springRepoMiles = 'http://repo.spring.io/milestone'
        springLoadedVersion = '1.2.1.BUILD-SNAPSHOT'
        //      springBootVersion = '1.1.4.RELEASE'
//        springVersion = '4.1.0.BUILD-SNAPSHOT'
        springBootVersion = '1.2.0.BUILD-SNAPSHOT'
    }

    repositories {
        maven { url springRepo }
        maven { url springRepoSnaps }
        maven { url springRepoMiles }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        //classpath("org.springframework:springloaded:${springLoadedVersion}")
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
    }
}

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    repositories {
        maven { url springRepo }
        maven { url springRepoSnaps }
        maven { url springRepoMiles }
    }

    if (project.parent == null) {
        idea {
            project {
                ipr {
                    withXml {
                        it.asNode().component.find { it.@name == 'ProjectRootManager' }.@languageLevel = ideaLanguageLevel
                    }
                }
            }
        }
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")

            excludeDirs += [
                    file('bin'), // containing build artifacts from Eclipse (if any)
                    file('work'), //    containing transient artifacts used by embedded Tomcat
                    file('logs'), // containing app logs written by embedded Tomcat
                    file('data'), // containing logs and data written by elasticsearch
                    file('.settings') // containing intentionally checked-in Eclipse metadata
            ]

        }

    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply from: "$gradleDir/integrationTest.gradle"

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }


    dependencies {
        compile 'org.slf4j:slf4j-api'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
        // replaced with Hikari
        all*.exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'

    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'

    springBoot.backupSource = false
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = [javaProjects.test, javaProjects.integrationTest]
    // Gather execution data from all sub projects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant source sets from the sub projects
    javaProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/jacoco/test"
    }
}






